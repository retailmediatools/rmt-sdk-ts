/* tslint:disable */
/* eslint-disable */
/**
 * Ad Service
 * RMT Ad Service API specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An ad response
 * @export
 * @interface Ad
 */
export interface Ad {
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Ad
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'campaign_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Ad
     */
    'advertised_skus'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'recommended_sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof Ad
     */
    'bid_cents': number | null;
    /**
     * 
     * @type {number}
     * @memberof Ad
     */
    'discount_value'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'discount_type'?: AdDiscountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'creative_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'link_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'headline'?: string;
    /**
     * 
     * @type {any}
     * @memberof Ad
     */
    'custom'?: any;
}

export const AdDiscountTypeEnum = {
    Percentage: 'PERCENTAGE',
    Absolute: 'ABSOLUTE'
} as const;

export type AdDiscountTypeEnum = typeof AdDiscountTypeEnum[keyof typeof AdDiscountTypeEnum];

/**
 * An ad set response
 * @export
 * @interface AdSet
 */
export interface AdSet {
    /**
     * 
     * @type {string}
     * @memberof AdSet
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdSet
     */
    'placement_id': string;
    /**
     * 
     * @type {string}
     * @memberof AdSet
     */
    'ad_source': AdSetAdSourceEnum;
    /**
     * 
     * @type {Array<Ad>}
     * @memberof AdSet
     */
    'ads': Array<Ad>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdSet
     */
    'store_keys': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdSet
     */
    'category_keys'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdSet
     */
    'keywords'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof AdSet
     */
    'shopper_key'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdSet
     */
    'shopper_keys_url'?: string;
}

export const AdSetAdSourceEnum = {
    ApiResponded: 'API_RESPONDED',
    BulkCreated: 'BULK_CREATED'
} as const;

export type AdSetAdSourceEnum = typeof AdSetAdSourceEnum[keyof typeof AdSetAdSourceEnum];

/**
 * A request for an ad set
 * @export
 * @interface AdSetRequest
 */
export interface AdSetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdSetRequest
     */
    'placement_id': string;
    /**
     * 
     * @type {string}
     * @memberof AdSetRequest
     */
    'shopper_key'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdSetRequest
     */
    'store_keys'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdSetRequest
     */
    'category_keys'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdSetRequest
     */
    'keywords'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof AdSetRequest
     */
    'session_key'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateAdSet201Response
 */
export interface CreateAdSet201Response {
    /**
     * 
     * @type {AdSet}
     * @memberof CreateAdSet201Response
     */
    'data'?: AdSet;
}
/**
 * 
 * @export
 * @interface GetCampaignStatus200Response
 */
export interface GetCampaignStatus200Response {
    /**
     * 
     * @type {ServingStatus}
     * @memberof GetCampaignStatus200Response
     */
    'data'?: ServingStatus;
}
/**
 * Campaign serving status
 * @export
 * @interface ServingStatus
 */
export interface ServingStatus {
    /**
     * 
     * @type {string}
     * @memberof ServingStatus
     */
    'status': ServingStatusStatusEnum;
}

export const ServingStatusStatusEnum = {
    NotServing: 'NOT_SERVING',
    Serving: 'SERVING'
} as const;

export type ServingStatusStatusEnum = typeof ServingStatusStatusEnum[keyof typeof ServingStatusStatusEnum];


/**
 * AdsApi - axios parameter creator
 * @export
 */
export const AdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an Ad Set containing a defined number of Ads for a specific Placement. Number of Ads can be lower than Placement.ads_count or even empty ads in case there are not enough active Campaigns available after filtering. Expects input parameters depending on Placement configuration. Returned Ads are valid (shopper interactions can be tracked) for 7 days.
         * @summary Create an Ad Set synchronously
         * @param {AdSetRequest} adSetRequest A request for ads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdSet: async (adSetRequest: AdSetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adSetRequest' is not null or undefined
            assertParamExists('createAdSet', 'adSetRequest', adSetRequest)
            const localVarPath = `/ad-set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", ["write-all:ad-set"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns if the Campaign is being served (considered for Ad display) by the system. Serving status is affected by multiple factors (running dates, budgets, approvals etc.)
         * @summary Get serving status for a campaign
         * @param {string} campaignId ID of campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignStatus: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignStatus', 'campaignId', campaignId)
            const localVarPath = `/ad-index/campaigns/{campaign_id}/status`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", ["read-all:campaign", "read:campaign"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdsApi - functional programming interface
 * @export
 */
export const AdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an Ad Set containing a defined number of Ads for a specific Placement. Number of Ads can be lower than Placement.ads_count or even empty ads in case there are not enough active Campaigns available after filtering. Expects input parameters depending on Placement configuration. Returned Ads are valid (shopper interactions can be tracked) for 7 days.
         * @summary Create an Ad Set synchronously
         * @param {AdSetRequest} adSetRequest A request for ads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdSet(adSetRequest: AdSetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAdSet201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdSet(adSetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns if the Campaign is being served (considered for Ad display) by the system. Serving status is affected by multiple factors (running dates, budgets, approvals etc.)
         * @summary Get serving status for a campaign
         * @param {string} campaignId ID of campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignStatus(campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCampaignStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignStatus(campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdsApi - factory interface
 * @export
 */
export const AdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdsApiFp(configuration)
    return {
        /**
         * Returns an Ad Set containing a defined number of Ads for a specific Placement. Number of Ads can be lower than Placement.ads_count or even empty ads in case there are not enough active Campaigns available after filtering. Expects input parameters depending on Placement configuration. Returned Ads are valid (shopper interactions can be tracked) for 7 days.
         * @summary Create an Ad Set synchronously
         * @param {AdSetRequest} adSetRequest A request for ads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdSet(adSetRequest: AdSetRequest, options?: any): AxiosPromise<CreateAdSet201Response> {
            return localVarFp.createAdSet(adSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns if the Campaign is being served (considered for Ad display) by the system. Serving status is affected by multiple factors (running dates, budgets, approvals etc.)
         * @summary Get serving status for a campaign
         * @param {string} campaignId ID of campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignStatus(campaignId: string, options?: any): AxiosPromise<GetCampaignStatus200Response> {
            return localVarFp.getCampaignStatus(campaignId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdsApi - object-oriented interface
 * @export
 * @class AdsApi
 * @extends {BaseAPI}
 */
export class AdsApi extends BaseAPI {
    /**
     * Returns an Ad Set containing a defined number of Ads for a specific Placement. Number of Ads can be lower than Placement.ads_count or even empty ads in case there are not enough active Campaigns available after filtering. Expects input parameters depending on Placement configuration. Returned Ads are valid (shopper interactions can be tracked) for 7 days.
     * @summary Create an Ad Set synchronously
     * @param {AdSetRequest} adSetRequest A request for ads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdsApi
     */
    public createAdSet(adSetRequest: AdSetRequest, options?: AxiosRequestConfig) {
        return AdsApiFp(this.configuration).createAdSet(adSetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns if the Campaign is being served (considered for Ad display) by the system. Serving status is affected by multiple factors (running dates, budgets, approvals etc.)
     * @summary Get serving status for a campaign
     * @param {string} campaignId ID of campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdsApi
     */
    public getCampaignStatus(campaignId: string, options?: AxiosRequestConfig) {
        return AdsApiFp(this.configuration).getCampaignStatus(campaignId, options).then((request) => request(this.axios, this.basePath));
    }
}


